                                      1 ;--------------------------------------------------------
                                      2 ; File Created by SDCC : free open source ANSI-C Compiler
                                      3 ; Version 3.5.0 #9253 (Mar 24 2016) (Linux)
                                      4 ; This file was generated Fri Mar 23 12:14:36 2018
                                      5 ;--------------------------------------------------------
                                      6 	.module button_state01
                                      7 	.optsdcc -mstm8
                                      8 	
                                      9 ;--------------------------------------------------------
                                     10 ; Public variables in this module
                                     11 ;--------------------------------------------------------
                                     12 	.globl _main
                                     13 	.globl _delay
                                     14 	.globl _msb
                                     15 	.globl _bs
                                     16 	.globl _ms
                                     17 ;--------------------------------------------------------
                                     18 ; ram data
                                     19 ;--------------------------------------------------------
                                     20 	.area DATA
                                     21 ;--------------------------------------------------------
                                     22 ; ram data
                                     23 ;--------------------------------------------------------
                                     24 	.area INITIALIZED
      000000                         25 _ms::
      000000                         26 	.ds 4
      000004                         27 _bs::
      000004                         28 	.ds 1
      000005                         29 _msb::
      000005                         30 	.ds 4
                                     31 ;--------------------------------------------------------
                                     32 ; Stack segment in internal ram 
                                     33 ;--------------------------------------------------------
                                     34 	.area	SSEG
      000000                         35 __start__stack:
      000000                         36 	.ds	1
                                     37 
                                     38 ;--------------------------------------------------------
                                     39 ; absolute external ram data
                                     40 ;--------------------------------------------------------
                                     41 	.area DABS (ABS)
                                     42 ;--------------------------------------------------------
                                     43 ; interrupt vector 
                                     44 ;--------------------------------------------------------
                                     45 	.area HOME
      000000                         46 __interrupt_vect:
      000000 82v00u00u00             47 	int s_GSINIT ;reset
      000004 82 00 00 00             48 	int 0x0000 ;trap
      000008 82 00 00 00             49 	int 0x0000 ;int0
      00000C 82 00 00 00             50 	int 0x0000 ;int1
      000010 82 00 00 00             51 	int 0x0000 ;int2
      000014 82 00 00 00             52 	int 0x0000 ;int3
      000018 82 00 00 00             53 	int 0x0000 ;int4
      00001C 82 00 00 00             54 	int 0x0000 ;int5
      000020 82 00 00 00             55 	int 0x0000 ;int6
      000024 82 00 00 00             56 	int 0x0000 ;int7
      000028 82 00 00 00             57 	int 0x0000 ;int8
      00002C 82 00 00 00             58 	int 0x0000 ;int9
      000030 82 00 00 00             59 	int 0x0000 ;int10
      000034 82 00 00 00             60 	int 0x0000 ;int11
      000038 82 00 00 00             61 	int 0x0000 ;int12
      00003C 82 00 00 00             62 	int 0x0000 ;int13
      000040 82 00 00 00             63 	int 0x0000 ;int14
      000044 82 00 00 00             64 	int 0x0000 ;int15
      000048 82 00 00 00             65 	int 0x0000 ;int16
      00004C 82 00 00 00             66 	int 0x0000 ;int17
      000050 82 00 00 00             67 	int 0x0000 ;int18
      000054 82 00 00 00             68 	int 0x0000 ;int19
      000058 82 00 00 00             69 	int 0x0000 ;int20
      00005C 82 00 00 00             70 	int 0x0000 ;int21
      000060 82 00 00 00             71 	int 0x0000 ;int22
      000064 82 00 00 00             72 	int 0x0000 ;int23
      000068 82 00 00 00             73 	int 0x0000 ;int24
      00006C 82 00 00 00             74 	int 0x0000 ;int25
      000070 82 00 00 00             75 	int 0x0000 ;int26
      000074 82 00 00 00             76 	int 0x0000 ;int27
      000078 82 00 00 00             77 	int 0x0000 ;int28
      00007C 82 00 00 00             78 	int 0x0000 ;int29
                                     79 ;--------------------------------------------------------
                                     80 ; global & static initialisations
                                     81 ;--------------------------------------------------------
                                     82 	.area HOME
                                     83 	.area GSINIT
                                     84 	.area GSFINAL
                                     85 	.area GSINIT
      000000                         86 __sdcc_gs_init_startup:
      000000                         87 __sdcc_init_data:
                                     88 ; stm8_genXINIT() start
      000000 AEr00r00         [ 2]   89 	ldw x, #l_DATA
      000003 27 07            [ 1]   90 	jreq	00002$
      000005                         91 00001$:
      000005 72 4FuFFuFF      [ 1]   92 	clr (s_DATA - 1, x)
      000009 5A               [ 2]   93 	decw x
      00000A 26 F9            [ 1]   94 	jrne	00001$
      00000C                         95 00002$:
      00000C AEr00r00         [ 2]   96 	ldw	x, #l_INITIALIZER
      00000F 27 09            [ 1]   97 	jreq	00004$
      000011                         98 00003$:
      000011 D6uFFuFF         [ 1]   99 	ld	a, (s_INITIALIZER - 1, x)
      000014 D7uFFuFF         [ 1]  100 	ld	(s_INITIALIZED - 1, x), a
      000017 5A               [ 2]  101 	decw	x
      000018 26 F7            [ 1]  102 	jrne	00003$
      00001A                        103 00004$:
                                    104 ; stm8_genXINIT() end
                                    105 	.area GSFINAL
      000000 CCr00r80         [ 2]  106 	jp	__sdcc_program_startup
                                    107 ;--------------------------------------------------------
                                    108 ; Home
                                    109 ;--------------------------------------------------------
                                    110 	.area HOME
                                    111 	.area HOME
      000080                        112 __sdcc_program_startup:
      000080 CCr00r2A         [ 2]  113 	jp	_main
                                    114 ;	return from main will return to caller
                                    115 ;--------------------------------------------------------
                                    116 ; code
                                    117 ;--------------------------------------------------------
                                    118 	.area CODE
                                    119 ;	./button_state01.c: 5: uint32_t delay(uint32_t t)  //объявление статической функции часла типа long переменной t для реализации работы функции delay
                                    120 ;	-----------------------------------------
                                    121 ;	 function delay
                                    122 ;	-----------------------------------------
      000000                        123 _delay:
      000000 52 04            [ 2]  124 	sub	sp, #4
                                    125 ;	./button_state01.c: 8: while(t--);
      000002 90 AE 01 F4      [ 2]  126 	ldw	y, #0x01f4
      000006 5F               [ 1]  127 	clrw	x
      000007                        128 00101$:
      000007 17 03            [ 2]  129 	ldw	(0x03, sp), y
      000009 1F 01            [ 2]  130 	ldw	(0x01, sp), x
      00000B 72 A2 00 01      [ 2]  131 	subw	y, #0x0001
      00000F 9F               [ 1]  132 	ld	a, xl
      000010 A2 00            [ 1]  133 	sbc	a, #0x00
      000012 02               [ 1]  134 	rlwa	x
      000013 A2 00            [ 1]  135 	sbc	a, #0x00
      000015 95               [ 1]  136 	ld	xh, a
      000016 0D 04            [ 1]  137 	tnz	(0x04, sp)
      000018 26 ED            [ 1]  138 	jrne	00101$
      00001A 0D 03            [ 1]  139 	tnz	(0x03, sp)
      00001C 26 E9            [ 1]  140 	jrne	00101$
      00001E 0D 02            [ 1]  141 	tnz	(0x02, sp)
      000020 26 E5            [ 1]  142 	jrne	00101$
      000022 0D 01            [ 1]  143 	tnz	(0x01, sp)
      000024 26 E1            [ 1]  144 	jrne	00101$
                                    145 ;	./button_state01.c: 9: return t;
      000026 51               [ 1]  146 	exgw	x, y
      000027 5B 04            [ 2]  147 	addw	sp, #4
      000029 81               [ 4]  148 	ret
                                    149 ;	./button_state01.c: 28: int main( void )    //установка портов и пинов
                                    150 ;	-----------------------------------------
                                    151 ;	 function main
                                    152 ;	-----------------------------------------
      00002A                        153 _main:
      00002A 52 08            [ 2]  154 	sub	sp, #8
                                    155 ;	./button_state01.c: 30: GPIOC->DDR |= 0x10;   	//направление данных порта out-0; input-1
      00002C AE 50 0C         [ 2]  156 	ldw	x, #0x500c
      00002F F6               [ 1]  157 	ld	a, (x)
      000030 AA 10            [ 1]  158 	or	a, #0x10
      000032 F7               [ 1]  159 	ld	(x), a
                                    160 ;	./button_state01.c: 31: GPIOC->CR1 |= 0x10;   	//установка подтягивающего резистора open-drain=0; push-pull=1
      000033 AE 50 0D         [ 2]  161 	ldw	x, #0x500d
      000036 F6               [ 1]  162 	ld	a, (x)
      000037 AA 10            [ 1]  163 	or	a, #0x10
      000039 F7               [ 1]  164 	ld	(x), a
                                    165 ;	./button_state01.c: 32: GPIOC->ODR |= 0x10;   	//установка значения бита 0/1
      00003A AE 50 0A         [ 2]  166 	ldw	x, #0x500a
      00003D F6               [ 1]  167 	ld	a, (x)
      00003E AA 10            [ 1]  168 	or	a, #0x10
      000040 F7               [ 1]  169 	ld	(x), a
                                    170 ;	./button_state01.c: 34: GPIOD->DDR |= 0x00;
      000041 AE 50 11         [ 2]  171 	ldw	x, #0x5011
      000044 F6               [ 1]  172 	ld	a, (x)
      000045 AE 50 11         [ 2]  173 	ldw	x, #0x5011
      000048 F7               [ 1]  174 	ld	(x), a
                                    175 ;	./button_state01.c: 35: GPIOD->CR1 |= 0x10;
      000049 AE 50 12         [ 2]  176 	ldw	x, #0x5012
      00004C F6               [ 1]  177 	ld	a, (x)
      00004D AA 10            [ 1]  178 	or	a, #0x10
      00004F F7               [ 1]  179 	ld	(x), a
                                    180 ;	./button_state01.c: 36: GPIOD->CR2 |= 0x00;
      000050 AE 50 13         [ 2]  181 	ldw	x, #0x5013
      000053 F6               [ 1]  182 	ld	a, (x)
      000054 AE 50 13         [ 2]  183 	ldw	x, #0x5013
      000057 F7               [ 1]  184 	ld	(x), a
                                    185 ;	./button_state01.c: 39: while(1){
      000058                        186 00110$:
                                    187 ;	./button_state01.c: 42: if ((GPIOD->IDR & 0x10) ==0x00 && !bs && (delay(ms)-msb)>50) // фиксируем нажатие кнопки
      000058 AE 50 10         [ 2]  188 	ldw	x, #0x5010
      00005B F6               [ 1]  189 	ld	a, (x)
      00005C A5 10            [ 1]  190 	bcp	a, #0x10
      00005E 26 52            [ 1]  191 	jrne	00102$
      000060 72 01u00u04 02   [ 2]  192 	btjf	_bs+0, #0, 00143$
      000065 20 4B            [ 2]  193 	jra	00102$
      000067                        194 00143$:
      000067 3Bu00u03         [ 1]  195 	push	_ms+3
      00006A 3Bu00u02         [ 1]  196 	push	_ms+2
      00006D 3Bu00u01         [ 1]  197 	push	_ms+1
      000070 3Bu00u00         [ 1]  198 	push	_ms+0
      000073 CDr00r00         [ 4]  199 	call	_delay
      000076 5B 04            [ 2]  200 	addw	sp, #4
      000078 51               [ 1]  201 	exgw	x, y
      000079 72 B2u00u07      [ 2]  202 	subw	y, _msb+2
      00007D 17 07            [ 2]  203 	ldw	(0x07, sp), y
      00007F 9F               [ 1]  204 	ld	a, xl
      000080 C2u00u06         [ 1]  205 	sbc	a, _msb+1
      000083 6B 06            [ 1]  206 	ld	(0x06, sp), a
      000085 9E               [ 1]  207 	ld	a, xh
      000086 C2u00u05         [ 1]  208 	sbc	a, _msb+0
      000089 6B 05            [ 1]  209 	ld	(0x05, sp), a
      00008B AE 00 32         [ 2]  210 	ldw	x, #0x0032
      00008E 13 07            [ 2]  211 	cpw	x, (0x07, sp)
      000090 4F               [ 1]  212 	clr	a
      000091 12 06            [ 1]  213 	sbc	a, (0x06, sp)
      000093 4F               [ 1]  214 	clr	a
      000094 12 05            [ 1]  215 	sbc	a, (0x05, sp)
      000096 24 1A            [ 1]  216 	jrnc	00102$
                                    217 ;	./button_state01.c: 44: bs=1;
      000098 35 01u00u04      [ 1]  218 	mov	_bs+0, #0x01
                                    219 ;	./button_state01.c: 45: msb=ms;
      00009C 90 CEu00u02      [ 2]  220 	ldw	y, _ms+2
      0000A0 CEu00u00         [ 2]  221 	ldw	x, _ms+0
      0000A3 90 CFu00u07      [ 2]  222 	ldw	_msb+2, y
      0000A7 CFu00u05         [ 2]  223 	ldw	_msb+0, x
                                    224 ;	./button_state01.c: 46: GPIOC->ODR ^= 0x00;
      0000AA AE 50 0A         [ 2]  225 	ldw	x, #0x500a
      0000AD F6               [ 1]  226 	ld	a, (x)
      0000AE AE 50 0A         [ 2]  227 	ldw	x, #0x500a
      0000B1 F7               [ 1]  228 	ld	(x), a
      0000B2                        229 00102$:
                                    230 ;	./button_state01.c: 51: if ((GPIOD->IDR & 0x10) ==0x10 && bs && (delay(ms)-msb)>50) // фиксируем отпускание  нажатие кнопки
      0000B2 AE 50 10         [ 2]  231 	ldw	x, #0x5010
      0000B5 F6               [ 1]  232 	ld	a, (x)
      0000B6 A4 10            [ 1]  233 	and	a, #0x10
      0000B8 A1 10            [ 1]  234 	cp	a, #0x10
      0000BA 26 9C            [ 1]  235 	jrne	00110$
      0000BC 72 00u00u04 02   [ 2]  236 	btjt	_bs+0, #0, 00148$
      0000C1 20 95            [ 2]  237 	jra	00110$
      0000C3                        238 00148$:
      0000C3 3Bu00u03         [ 1]  239 	push	_ms+3
      0000C6 3Bu00u02         [ 1]  240 	push	_ms+2
      0000C9 3Bu00u01         [ 1]  241 	push	_ms+1
      0000CC 3Bu00u00         [ 1]  242 	push	_ms+0
      0000CF CDr00r00         [ 4]  243 	call	_delay
      0000D2 5B 04            [ 2]  244 	addw	sp, #4
      0000D4 51               [ 1]  245 	exgw	x, y
      0000D5 72 B2u00u07      [ 2]  246 	subw	y, _msb+2
      0000D9 17 03            [ 2]  247 	ldw	(0x03, sp), y
      0000DB 9F               [ 1]  248 	ld	a, xl
      0000DC C2u00u06         [ 1]  249 	sbc	a, _msb+1
      0000DF 6B 02            [ 1]  250 	ld	(0x02, sp), a
      0000E1 9E               [ 1]  251 	ld	a, xh
      0000E2 C2u00u05         [ 1]  252 	sbc	a, _msb+0
      0000E5 6B 01            [ 1]  253 	ld	(0x01, sp), a
      0000E7 AE 00 32         [ 2]  254 	ldw	x, #0x0032
      0000EA 13 03            [ 2]  255 	cpw	x, (0x03, sp)
      0000EC 4F               [ 1]  256 	clr	a
      0000ED 12 02            [ 1]  257 	sbc	a, (0x02, sp)
      0000EF 4F               [ 1]  258 	clr	a
      0000F0 12 01            [ 1]  259 	sbc	a, (0x01, sp)
      0000F2 25 03            [ 1]  260 	jrc	00149$
      0000F4 CCr00r58         [ 2]  261 	jp	00110$
      0000F7                        262 00149$:
                                    263 ;	./button_state01.c: 53: bs=0;
      0000F7 72 5Fu00u04      [ 1]  264 	clr	_bs+0
                                    265 ;	./button_state01.c: 54: msb=ms;
      0000FB 90 CEu00u02      [ 2]  266 	ldw	y, _ms+2
      0000FF CEu00u00         [ 2]  267 	ldw	x, _ms+0
      000102 90 CFu00u07      [ 2]  268 	ldw	_msb+2, y
      000106 CFu00u05         [ 2]  269 	ldw	_msb+0, x
                                    270 ;	./button_state01.c: 55: GPIOC->ODR ^= 0x10;
      000109 AE 50 0A         [ 2]  271 	ldw	x, #0x500a
      00010C F6               [ 1]  272 	ld	a, (x)
      00010D A8 10            [ 1]  273 	xor	a, #0x10
      00010F F7               [ 1]  274 	ld	(x), a
      000110 CCr00r58         [ 2]  275 	jp	00110$
      000113 5B 08            [ 2]  276 	addw	sp, #8
      000115 81               [ 4]  277 	ret
                                    278 	.area CODE
                                    279 	.area INITIALIZER
      000000                        280 __xinit__ms:
      000000 00 00 00 00            281 	.byte #0x00,#0x00,#0x00,#0x00	; 0
      000004                        282 __xinit__bs:
      000004 00                     283 	.db #0x00	;  0
      000005                        284 __xinit__msb:
      000005 00 00 00 00            285 	.byte #0x00,#0x00,#0x00,#0x00	; 0
                                    286 	.area CABS (ABS)
