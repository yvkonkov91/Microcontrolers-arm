                                      1 ;--------------------------------------------------------
                                      2 ; File Created by SDCC : free open source ANSI-C Compiler
                                      3 ; Version 3.5.0 #9253 (Mar 24 2016) (Linux)
                                      4 ; This file was generated Wed Apr 11 21:41:26 2018
                                      5 ;--------------------------------------------------------
                                      6 	.module delay02
                                      7 	.optsdcc -mstm8
                                      8 	
                                      9 ;--------------------------------------------------------
                                     10 ; Public variables in this module
                                     11 ;--------------------------------------------------------
                                     12 	.globl _main
                                     13 	.globl _pin_cfg
                                     14 	.globl _delay_ms
                                     15 	.globl _TIM4_cfg
                                     16 	.globl _delay
                                     17 	.globl _count
                                     18 ;--------------------------------------------------------
                                     19 ; ram data
                                     20 ;--------------------------------------------------------
                                     21 	.area DATA
      000001                         22 _count::
      000001                         23 	.ds 2
                                     24 ;--------------------------------------------------------
                                     25 ; ram data
                                     26 ;--------------------------------------------------------
                                     27 	.area INITIALIZED
                                     28 ;--------------------------------------------------------
                                     29 ; Stack segment in internal ram 
                                     30 ;--------------------------------------------------------
                                     31 	.area	SSEG
      000003                         32 __start__stack:
      000003                         33 	.ds	1
                                     34 
                                     35 ;--------------------------------------------------------
                                     36 ; absolute external ram data
                                     37 ;--------------------------------------------------------
                                     38 	.area DABS (ABS)
                                     39 ;--------------------------------------------------------
                                     40 ; interrupt vector 
                                     41 ;--------------------------------------------------------
                                     42 	.area HOME
      008000                         43 __interrupt_vect:
      008000 82 00 80 83             44 	int s_GSINIT ;reset
      008004 82 00 00 00             45 	int 0x0000 ;trap
      008008 82 00 00 00             46 	int 0x0000 ;int0
      00800C 82 00 00 00             47 	int 0x0000 ;int1
      008010 82 00 00 00             48 	int 0x0000 ;int2
      008014 82 00 00 00             49 	int 0x0000 ;int3
      008018 82 00 00 00             50 	int 0x0000 ;int4
      00801C 82 00 00 00             51 	int 0x0000 ;int5
      008020 82 00 00 00             52 	int 0x0000 ;int6
      008024 82 00 00 00             53 	int 0x0000 ;int7
      008028 82 00 00 00             54 	int 0x0000 ;int8
      00802C 82 00 00 00             55 	int 0x0000 ;int9
      008030 82 00 00 00             56 	int 0x0000 ;int10
      008034 82 00 00 00             57 	int 0x0000 ;int11
      008038 82 00 00 00             58 	int 0x0000 ;int12
      00803C 82 00 00 00             59 	int 0x0000 ;int13
      008040 82 00 00 00             60 	int 0x0000 ;int14
      008044 82 00 00 00             61 	int 0x0000 ;int15
      008048 82 00 00 00             62 	int 0x0000 ;int16
      00804C 82 00 00 00             63 	int 0x0000 ;int17
      008050 82 00 00 00             64 	int 0x0000 ;int18
      008054 82 00 00 00             65 	int 0x0000 ;int19
      008058 82 00 00 00             66 	int 0x0000 ;int20
      00805C 82 00 00 00             67 	int 0x0000 ;int21
      008060 82 00 00 00             68 	int 0x0000 ;int22
      008064 82 00 80 A0             69 	int _delay ;int23
      008068 82 00 00 00             70 	int 0x0000 ;int24
      00806C 82 00 00 00             71 	int 0x0000 ;int25
      008070 82 00 00 00             72 	int 0x0000 ;int26
      008074 82 00 00 00             73 	int 0x0000 ;int27
      008078 82 00 00 00             74 	int 0x0000 ;int28
      00807C 82 00 00 00             75 	int 0x0000 ;int29
                                     76 ;--------------------------------------------------------
                                     77 ; global & static initialisations
                                     78 ;--------------------------------------------------------
                                     79 	.area HOME
                                     80 	.area GSINIT
                                     81 	.area GSFINAL
                                     82 	.area GSINIT
      008083                         83 __sdcc_gs_init_startup:
      008083                         84 __sdcc_init_data:
                                     85 ; stm8_genXINIT() start
      008083 AE 00 02         [ 2]   86 	ldw x, #l_DATA
      008086 27 07            [ 1]   87 	jreq	00002$
      008088                         88 00001$:
      008088 72 4F 00 00      [ 1]   89 	clr (s_DATA - 1, x)
      00808C 5A               [ 2]   90 	decw x
      00808D 26 F9            [ 1]   91 	jrne	00001$
      00808F                         92 00002$:
      00808F AE 00 00         [ 2]   93 	ldw	x, #l_INITIALIZER
      008092 27 09            [ 1]   94 	jreq	00004$
      008094                         95 00003$:
      008094 D6 81 0A         [ 1]   96 	ld	a, (s_INITIALIZER - 1, x)
      008097 D7 00 02         [ 1]   97 	ld	(s_INITIALIZED - 1, x), a
      00809A 5A               [ 2]   98 	decw	x
      00809B 26 F7            [ 1]   99 	jrne	00003$
      00809D                        100 00004$:
                                    101 ; stm8_genXINIT() end
                                    102 	.area GSFINAL
      00809D CC 80 80         [ 2]  103 	jp	__sdcc_program_startup
                                    104 ;--------------------------------------------------------
                                    105 ; Home
                                    106 ;--------------------------------------------------------
                                    107 	.area HOME
                                    108 	.area HOME
      008080                        109 __sdcc_program_startup:
      008080 CC 80 EC         [ 2]  110 	jp	_main
                                    111 ;	return from main will return to caller
                                    112 ;--------------------------------------------------------
                                    113 ; code
                                    114 ;--------------------------------------------------------
                                    115 	.area CODE
                                    116 ;	./delay02.c: 6: extern void delay(void) __interrupt(23) //обработчик прерывания функции delay_ms
                                    117 ;	-----------------------------------------
                                    118 ;	 function delay
                                    119 ;	-----------------------------------------
      0080A0                        120 _delay:
                                    121 ;	./delay02.c: 8: if(count)
      0080A0 CE 00 01         [ 2]  122 	ldw	x, _count+0
      0080A3 27 07            [ 1]  123 	jreq	00102$
                                    124 ;	./delay02.c: 9: count--;    //дикримент переменной count
      0080A5 CE 00 01         [ 2]  125 	ldw	x, _count+0
      0080A8 5A               [ 2]  126 	decw	x
      0080A9 CF 00 01         [ 2]  127 	ldw	_count+0, x
      0080AC                        128 00102$:
                                    129 ;	./delay02.c: 10: TIM4->SR1   = 0x00; ////событие обновления не происходило
      0080AC 35 00 53 44      [ 1]  130 	mov	0x5344+0, #0x00
      0080B0 80               [11]  131 	iret
                                    132 ;	./delay02.c: 14: void TIM4_cfg() //настройка таймера
                                    133 ;	-----------------------------------------
                                    134 ;	 function TIM4_cfg
                                    135 ;	-----------------------------------------
      0080B1                        136 _TIM4_cfg:
                                    137 ;	./delay02.c: 16: TIM4->SR1   = 0x1;   //событие обновления не происходило
      0080B1 35 01 53 44      [ 1]  138 	mov	0x5344+0, #0x01
                                    139 ;	./delay02.c: 17: TIM4->IER  |= 1;    // прерывания по обновлению включены
      0080B5 72 10 53 43      [ 1]  140 	bset	0x5343, #0
                                    141 ;	./delay02.c: 18: TIM4->PSCR |= 128; // установка предделителя 128
      0080B9 72 1E 53 47      [ 1]  142 	bset	0x5347, #7
                                    143 ;	./delay02.c: 19: TIM4->ARR  |= 128;    // значение автоперезагрузки
      0080BD 72 1E 53 48      [ 1]  144 	bset	0x5348, #7
      0080C1 81               [ 4]  145 	ret
                                    146 ;	./delay02.c: 22: void delay_ms(uint16_t ms) //функция выдержки времени
                                    147 ;	-----------------------------------------
                                    148 ;	 function delay_ms
                                    149 ;	-----------------------------------------
      0080C2                        150 _delay_ms:
                                    151 ;	./delay02.c: 24: TIM4->CR1  = 0x0;
      0080C2 35 00 53 40      [ 1]  152 	mov	0x5340+0, #0x00
                                    153 ;	./delay02.c: 25: TIM4_cfg(); //вызов функции настройки таймера
      0080C6 CD 80 B1         [ 4]  154 	call	_TIM4_cfg
                                    155 ;	./delay02.c: 26: count = ms;
      0080C9 7B 04            [ 1]  156 	ld	a, (0x04, sp)
      0080CB C7 00 02         [ 1]  157 	ld	_count+1, a
      0080CE 7B 03            [ 1]  158 	ld	a, (0x03, sp)
      0080D0 C7 00 01         [ 1]  159 	ld	_count+0, a
                                    160 ;	./delay02.c: 27: TIM4->CR1  = 0x1;
      0080D3 35 01 53 40      [ 1]  161 	mov	0x5340+0, #0x01
                                    162 ;	./delay02.c: 28: while(count);
      0080D7                        163 00101$:
      0080D7 CE 00 01         [ 2]  164 	ldw	x, _count+0
      0080DA 26 FB            [ 1]  165 	jrne	00101$
      0080DC 81               [ 4]  166 	ret
                                    167 ;	./delay02.c: 32: void pin_cfg()  //функция настройки GPIO
                                    168 ;	-----------------------------------------
                                    169 ;	 function pin_cfg
                                    170 ;	-----------------------------------------
      0080DD                        171 _pin_cfg:
                                    172 ;	./delay02.c: 34: GPIOB->DDR |= 0b00100000;
      0080DD AE 50 07         [ 2]  173 	ldw	x, #0x5007
      0080E0 F6               [ 1]  174 	ld	a, (x)
      0080E1 AA 20            [ 1]  175 	or	a, #0x20
      0080E3 F7               [ 1]  176 	ld	(x), a
                                    177 ;	./delay02.c: 35: GPIOB->CR1 |= 0b00100000;
      0080E4 AE 50 08         [ 2]  178 	ldw	x, #0x5008
      0080E7 F6               [ 1]  179 	ld	a, (x)
      0080E8 AA 20            [ 1]  180 	or	a, #0x20
      0080EA F7               [ 1]  181 	ld	(x), a
      0080EB 81               [ 4]  182 	ret
                                    183 ;	./delay02.c: 38: int main( void )    //установка портов и пинов
                                    184 ;	-----------------------------------------
                                    185 ;	 function main
                                    186 ;	-----------------------------------------
      0080EC                        187 _main:
                                    188 ;	./delay02.c: 41: CLK->CKDIVR |= 0; // коэффициент деления частоты HSI-генератора (16MHz)
      0080EC AE 50 C6         [ 2]  189 	ldw	x, #0x50c6
      0080EF F6               [ 1]  190 	ld	a, (x)
      0080F0 AE 50 C6         [ 2]  191 	ldw	x, #0x50c6
      0080F3 F7               [ 1]  192 	ld	(x), a
                                    193 ;	./delay02.c: 43: pin_cfg();  //функция настройки GPIO
      0080F4 CD 80 DD         [ 4]  194 	call	_pin_cfg
                                    195 ;	./delay02.c: 45: rim(); // разрешение прерывания!
      0080F7 9A               [ 1]  196 	rim 
                                    197 ;	./delay02.c: 48: while(1)  //бесконечный цикл        
      0080F8                        198 00102$:
                                    199 ;	./delay02.c: 50: GPIOB->ODR ^=0b00100000;  //зажигаем светодиод
      0080F8 AE 50 05         [ 2]  200 	ldw	x, #0x5005
      0080FB F6               [ 1]  201 	ld	a, (x)
      0080FC A8 20            [ 1]  202 	xor	a, #0x20
      0080FE F7               [ 1]  203 	ld	(x), a
                                    204 ;	./delay02.c: 51: delay_ms(5000);   //временная задержка
      0080FF 4B 88            [ 1]  205 	push	#0x88
      008101 4B 13            [ 1]  206 	push	#0x13
      008103 CD 80 C2         [ 4]  207 	call	_delay_ms
      008106 5B 02            [ 2]  208 	addw	sp, #2
      008108 20 EE            [ 2]  209 	jra	00102$
      00810A 81               [ 4]  210 	ret
                                    211 	.area CODE
                                    212 	.area INITIALIZER
                                    213 	.area CABS (ABS)
