                                      1 ;--------------------------------------------------------
                                      2 ; File Created by SDCC : free open source ANSI-C Compiler
                                      3 ; Version 3.5.0 #9253 (Mar 24 2016) (Linux)
                                      4 ; This file was generated Sun Apr 22 01:20:23 2018
                                      5 ;--------------------------------------------------------
                                      6 	.module buttest
                                      7 	.optsdcc -mstm8
                                      8 	
                                      9 ;--------------------------------------------------------
                                     10 ; Public variables in this module
                                     11 ;--------------------------------------------------------
                                     12 	.globl _main
                                     13 	.globl _runLdDn
                                     14 	.globl _runLdUp
                                     15 	.globl _RunningDn
                                     16 	.globl _RunningUp
                                     17 	.globl _Pin
                                     18 	.globl _if_0
                                     19 	.globl _pin_int
                                     20 	.globl _delay_ms
                                     21 	.globl _TIM4_cfg
                                     22 	.globl _delay_interrupt
                                     23 	.globl _b
                                     24 	.globl _s
                                     25 	.globl _n
                                     26 	.globl _count
                                     27 ;--------------------------------------------------------
                                     28 ; ram data
                                     29 ;--------------------------------------------------------
                                     30 	.area DATA
      000001                         31 _count::
      000001                         32 	.ds 2
      000003                         33 _n::
      000003                         34 	.ds 1
                                     35 ;--------------------------------------------------------
                                     36 ; ram data
                                     37 ;--------------------------------------------------------
                                     38 	.area INITIALIZED
      000004                         39 _s::
      000004                         40 	.ds 4
      000008                         41 _b::
      000008                         42 	.ds 1
                                     43 ;--------------------------------------------------------
                                     44 ; Stack segment in internal ram 
                                     45 ;--------------------------------------------------------
                                     46 	.area	SSEG
      000009                         47 __start__stack:
      000009                         48 	.ds	1
                                     49 
                                     50 ;--------------------------------------------------------
                                     51 ; absolute external ram data
                                     52 ;--------------------------------------------------------
                                     53 	.area DABS (ABS)
                                     54 ;--------------------------------------------------------
                                     55 ; interrupt vector 
                                     56 ;--------------------------------------------------------
                                     57 	.area HOME
      008000                         58 __interrupt_vect:
      008000 82 00 80 83             59 	int s_GSINIT ;reset
      008004 82 00 00 00             60 	int 0x0000 ;trap
      008008 82 00 00 00             61 	int 0x0000 ;int0
      00800C 82 00 00 00             62 	int 0x0000 ;int1
      008010 82 00 00 00             63 	int 0x0000 ;int2
      008014 82 00 00 00             64 	int 0x0000 ;int3
      008018 82 00 00 00             65 	int 0x0000 ;int4
      00801C 82 00 00 00             66 	int 0x0000 ;int5
      008020 82 00 80 E0             67 	int _pin_int ;int6
      008024 82 00 00 00             68 	int 0x0000 ;int7
      008028 82 00 00 00             69 	int 0x0000 ;int8
      00802C 82 00 00 00             70 	int 0x0000 ;int9
      008030 82 00 00 00             71 	int 0x0000 ;int10
      008034 82 00 00 00             72 	int 0x0000 ;int11
      008038 82 00 00 00             73 	int 0x0000 ;int12
      00803C 82 00 00 00             74 	int 0x0000 ;int13
      008040 82 00 00 00             75 	int 0x0000 ;int14
      008044 82 00 00 00             76 	int 0x0000 ;int15
      008048 82 00 00 00             77 	int 0x0000 ;int16
      00804C 82 00 00 00             78 	int 0x0000 ;int17
      008050 82 00 00 00             79 	int 0x0000 ;int18
      008054 82 00 00 00             80 	int 0x0000 ;int19
      008058 82 00 00 00             81 	int 0x0000 ;int20
      00805C 82 00 00 00             82 	int 0x0000 ;int21
      008060 82 00 00 00             83 	int 0x0000 ;int22
      008064 82 00 80 A0             84 	int _delay_interrupt ;int23
      008068 82 00 00 00             85 	int 0x0000 ;int24
      00806C 82 00 00 00             86 	int 0x0000 ;int25
      008070 82 00 00 00             87 	int 0x0000 ;int26
      008074 82 00 00 00             88 	int 0x0000 ;int27
      008078 82 00 00 00             89 	int 0x0000 ;int28
      00807C 82 00 00 00             90 	int 0x0000 ;int29
                                     91 ;--------------------------------------------------------
                                     92 ; global & static initialisations
                                     93 ;--------------------------------------------------------
                                     94 	.area HOME
                                     95 	.area GSINIT
                                     96 	.area GSFINAL
                                     97 	.area GSINIT
      008083                         98 __sdcc_gs_init_startup:
      008083                         99 __sdcc_init_data:
                                    100 ; stm8_genXINIT() start
      008083 AE 00 03         [ 2]  101 	ldw x, #l_DATA
      008086 27 07            [ 1]  102 	jreq	00002$
      008088                        103 00001$:
      008088 72 4F 00 00      [ 1]  104 	clr (s_DATA - 1, x)
      00808C 5A               [ 2]  105 	decw x
      00808D 26 F9            [ 1]  106 	jrne	00001$
      00808F                        107 00002$:
      00808F AE 00 05         [ 2]  108 	ldw	x, #l_INITIALIZER
      008092 27 09            [ 1]  109 	jreq	00004$
      008094                        110 00003$:
      008094 D6 82 54         [ 1]  111 	ld	a, (s_INITIALIZER - 1, x)
      008097 D7 00 03         [ 1]  112 	ld	(s_INITIALIZED - 1, x), a
      00809A 5A               [ 2]  113 	decw	x
      00809B 26 F7            [ 1]  114 	jrne	00003$
      00809D                        115 00004$:
                                    116 ; stm8_genXINIT() end
                                    117 	.area GSFINAL
      00809D CC 80 80         [ 2]  118 	jp	__sdcc_program_startup
                                    119 ;--------------------------------------------------------
                                    120 ; Home
                                    121 ;--------------------------------------------------------
                                    122 	.area HOME
                                    123 	.area HOME
      008080                        124 __sdcc_program_startup:
      008080 CC 82 15         [ 2]  125 	jp	_main
                                    126 ;	return from main will return to caller
                                    127 ;--------------------------------------------------------
                                    128 ; code
                                    129 ;--------------------------------------------------------
                                    130 	.area CODE
                                    131 ;	../lib/lib1/inc/stm8s_delay.h: 3: extern void delay_interrupt(void) __interrupt(23) //обработчик прерывания функции delay_ms таймера TIM4
                                    132 ;	-----------------------------------------
                                    133 ;	 function delay_interrupt
                                    134 ;	-----------------------------------------
      0080A0                        135 _delay_interrupt:
                                    136 ;	../lib/lib1/inc/stm8s_delay.h: 5: if(count)
      0080A0 CE 00 01         [ 2]  137 	ldw	x, _count+0
      0080A3 27 07            [ 1]  138 	jreq	00102$
                                    139 ;	../lib/lib1/inc/stm8s_delay.h: 6: count--;    //дикримент переменной count
      0080A5 CE 00 01         [ 2]  140 	ldw	x, _count+0
      0080A8 5A               [ 2]  141 	decw	x
      0080A9 CF 00 01         [ 2]  142 	ldw	_count+0, x
      0080AC                        143 00102$:
                                    144 ;	../lib/lib1/inc/stm8s_delay.h: 7: TIM4->SR1   = 0x00; ////событие обновления не происходило
      0080AC 35 00 53 44      [ 1]  145 	mov	0x5344+0, #0x00
      0080B0 80               [11]  146 	iret
                                    147 ;	../lib/lib1/inc/stm8s_delay.h: 9: void TIM4_cfg() //настройка таймера
                                    148 ;	-----------------------------------------
                                    149 ;	 function TIM4_cfg
                                    150 ;	-----------------------------------------
      0080B1                        151 _TIM4_cfg:
                                    152 ;	../lib/lib1/inc/stm8s_delay.h: 11: TIM4->SR1   = 0x1;   //событие обновления не происходило
      0080B1 35 01 53 44      [ 1]  153 	mov	0x5344+0, #0x01
                                    154 ;	../lib/lib1/inc/stm8s_delay.h: 12: TIM4->IER  |= 1;    // прерывания по обновлению включены
      0080B5 72 10 53 43      [ 1]  155 	bset	0x5343, #0
                                    156 ;	../lib/lib1/inc/stm8s_delay.h: 13: TIM4->PSCR |= 128; // установка предделителя 128
      0080B9 72 1E 53 47      [ 1]  157 	bset	0x5347, #7
                                    158 ;	../lib/lib1/inc/stm8s_delay.h: 14: TIM4->ARR  |= 124;    // значение автоперезагрузки
      0080BD AE 53 48         [ 2]  159 	ldw	x, #0x5348
      0080C0 F6               [ 1]  160 	ld	a, (x)
      0080C1 AA 7C            [ 1]  161 	or	a, #0x7c
      0080C3 F7               [ 1]  162 	ld	(x), a
      0080C4 81               [ 4]  163 	ret
                                    164 ;	../lib/lib1/inc/stm8s_delay.h: 16: void delay_ms(uint16_t ms) //функция выдержки времени
                                    165 ;	-----------------------------------------
                                    166 ;	 function delay_ms
                                    167 ;	-----------------------------------------
      0080C5                        168 _delay_ms:
                                    169 ;	../lib/lib1/inc/stm8s_delay.h: 18: TIM4->CR1  = 0x0;
      0080C5 35 00 53 40      [ 1]  170 	mov	0x5340+0, #0x00
                                    171 ;	../lib/lib1/inc/stm8s_delay.h: 19: TIM4_cfg(); //вызов функции настройки таймера
      0080C9 CD 80 B1         [ 4]  172 	call	_TIM4_cfg
                                    173 ;	../lib/lib1/inc/stm8s_delay.h: 20: count = ms;
      0080CC 7B 04            [ 1]  174 	ld	a, (0x04, sp)
      0080CE C7 00 02         [ 1]  175 	ld	_count+1, a
      0080D1 7B 03            [ 1]  176 	ld	a, (0x03, sp)
      0080D3 C7 00 01         [ 1]  177 	ld	_count+0, a
                                    178 ;	../lib/lib1/inc/stm8s_delay.h: 21: TIM4->CR1  = 0x1;
      0080D6 35 01 53 40      [ 1]  179 	mov	0x5340+0, #0x01
                                    180 ;	../lib/lib1/inc/stm8s_delay.h: 22: while(count);
      0080DA                        181 00101$:
      0080DA CE 00 01         [ 2]  182 	ldw	x, _count+0
      0080DD 26 FB            [ 1]  183 	jrne	00101$
      0080DF 81               [ 4]  184 	ret
                                    185 ;	./buttest.c: 7: void pin_int(void) __interrupt(6)   //обработчик прерывания по порту D
                                    186 ;	-----------------------------------------
                                    187 ;	 function pin_int
                                    188 ;	-----------------------------------------
      0080E0                        189 _pin_int:
                                    190 ;	./buttest.c: 11: n=5;
      0080E0 35 05 00 03      [ 1]  191 	mov	_n+0, #0x05
                                    192 ;	./buttest.c: 12: GPIOC->ODR |= 0xf8;
      0080E4 AE 50 0A         [ 2]  193 	ldw	x, #0x500a
      0080E7 F6               [ 1]  194 	ld	a, (x)
      0080E8 AA F8            [ 1]  195 	or	a, #0xf8
      0080EA F7               [ 1]  196 	ld	(x), a
                                    197 ;	./buttest.c: 13: if (b>=4)
      0080EB C6 00 08         [ 1]  198 	ld	a, _b+0
      0080EE A1 04            [ 1]  199 	cp	a, #0x04
      0080F0 25 06            [ 1]  200 	jrc	00102$
                                    201 ;	./buttest.c: 15: b=0;
      0080F2 72 5F 00 08      [ 1]  202 	clr	_b+0
      0080F6 20 04            [ 2]  203 	jra	00104$
      0080F8                        204 00102$:
                                    205 ;	./buttest.c: 18: b++;
      0080F8 72 5C 00 08      [ 1]  206 	inc	_b+0
      0080FC                        207 00104$:
      0080FC 80               [11]  208 	iret
                                    209 ;	./buttest.c: 22: void if_0(void)  //функция условия
                                    210 ;	-----------------------------------------
                                    211 ;	 function if_0
                                    212 ;	-----------------------------------------
      0080FD                        213 _if_0:
                                    214 ;	./buttest.c: 24: n++;
      0080FD C6 00 03         [ 1]  215 	ld	a, _n+0
      008100 4C               [ 1]  216 	inc	a
                                    217 ;	./buttest.c: 25: if ( n>=5 )
      008101 C7 00 03         [ 1]  218 	ld	_n+0, a
      008104 A1 05            [ 1]  219 	cp	a, #0x05
      008106 25 04            [ 1]  220 	jrc	00103$
                                    221 ;	./buttest.c: 27: n=0;
      008108 72 5F 00 03      [ 1]  222 	clr	_n+0
      00810C                        223 00103$:
      00810C 81               [ 4]  224 	ret
                                    225 ;	./buttest.c: 39: void Pin()  // настройка портов
                                    226 ;	-----------------------------------------
                                    227 ;	 function Pin
                                    228 ;	-----------------------------------------
      00810D                        229 _Pin:
                                    230 ;	./buttest.c: 41: GPIOC->DDR |= 0xf8;   //GPIO_PIN_3 | GPIO_PIN_4 | GPIO_PIN_5 | GPIO_PIN_6 | GPIO_PIN_7;	//направление данных порта out-0; input-1
      00810D AE 50 0C         [ 2]  231 	ldw	x, #0x500c
      008110 F6               [ 1]  232 	ld	a, (x)
      008111 AA F8            [ 1]  233 	or	a, #0xf8
      008113 F7               [ 1]  234 	ld	(x), a
                                    235 ;	./buttest.c: 42: GPIOC->CR1 |= 0xf8;   //GPIO_PIN_3 | GPIO_PIN_4 | GPIO_PIN_5 | GPIO_PIN_6 | GPIO_PIN_7;	//установка подтягивающего резистора open-drain=0; push-pull=1
      008114 AE 50 0D         [ 2]  236 	ldw	x, #0x500d
      008117 F6               [ 1]  237 	ld	a, (x)
      008118 AA F8            [ 1]  238 	or	a, #0xf8
      00811A F7               [ 1]  239 	ld	(x), a
                                    240 ;	./buttest.c: 45: GPIOD->DDR |= 0b00000000;
      00811B AE 50 11         [ 2]  241 	ldw	x, #0x5011
      00811E F6               [ 1]  242 	ld	a, (x)
      00811F AE 50 11         [ 2]  243 	ldw	x, #0x5011
      008122 F7               [ 1]  244 	ld	(x), a
                                    245 ;	./buttest.c: 46: GPIOD->CR1 |= 0b01000010;
      008123 AE 50 12         [ 2]  246 	ldw	x, #0x5012
      008126 F6               [ 1]  247 	ld	a, (x)
      008127 AA 42            [ 1]  248 	or	a, #0x42
      008129 F7               [ 1]  249 	ld	(x), a
                                    250 ;	./buttest.c: 47: GPIOD->CR2 |= 0b01000010;
      00812A AE 50 13         [ 2]  251 	ldw	x, #0x5013
      00812D F6               [ 1]  252 	ld	a, (x)
      00812E AA 42            [ 1]  253 	or	a, #0x42
      008130 F7               [ 1]  254 	ld	(x), a
                                    255 ;	./buttest.c: 49: EXTI->CR1  |= 0b01000000;
      008131 AE 50 A0         [ 2]  256 	ldw	x, #0x50a0
      008134 F6               [ 1]  257 	ld	a, (x)
      008135 AA 40            [ 1]  258 	or	a, #0x40
      008137 F7               [ 1]  259 	ld	(x), a
      008138 81               [ 4]  260 	ret
                                    261 ;	./buttest.c: 52: void RunningUp()    //функция направление бегущиго огня с л->п
                                    262 ;	-----------------------------------------
                                    263 ;	 function RunningUp
                                    264 ;	-----------------------------------------
      008139                        265 _RunningUp:
      008139 52 02            [ 2]  266 	sub	sp, #2
                                    267 ;	./buttest.c: 54: GPIOC->ODR ^= 0x08 << n;
      00813B AE 50 0A         [ 2]  268 	ldw	x, #0x500a
      00813E F6               [ 1]  269 	ld	a, (x)
      00813F 6B 02            [ 1]  270 	ld	(0x02, sp), a
      008141 A6 08            [ 1]  271 	ld	a, #0x08
      008143 88               [ 1]  272 	push	a
      008144 C6 00 03         [ 1]  273 	ld	a, _n+0
      008147 27 05            [ 1]  274 	jreq	00104$
      008149                        275 00103$:
      008149 08 01            [ 1]  276 	sll	(1, sp)
      00814B 4A               [ 1]  277 	dec	a
      00814C 26 FB            [ 1]  278 	jrne	00103$
      00814E                        279 00104$:
      00814E 84               [ 1]  280 	pop	a
      00814F 18 02            [ 1]  281 	xor	a, (0x02, sp)
      008151 AE 50 0A         [ 2]  282 	ldw	x, #0x500a
      008154 F7               [ 1]  283 	ld	(x), a
                                    284 ;	./buttest.c: 55: delay_ms(s);
      008155 CE 00 06         [ 2]  285 	ldw	x, _s+2
      008158 89               [ 2]  286 	pushw	x
      008159 CD 80 C5         [ 4]  287 	call	_delay_ms
      00815C 5B 02            [ 2]  288 	addw	sp, #2
                                    289 ;	./buttest.c: 56: GPIOC->ODR |= 0x08 << n;
      00815E AE 50 0A         [ 2]  290 	ldw	x, #0x500a
      008161 F6               [ 1]  291 	ld	a, (x)
      008162 6B 01            [ 1]  292 	ld	(0x01, sp), a
      008164 A6 08            [ 1]  293 	ld	a, #0x08
      008166 88               [ 1]  294 	push	a
      008167 C6 00 03         [ 1]  295 	ld	a, _n+0
      00816A 27 05            [ 1]  296 	jreq	00106$
      00816C                        297 00105$:
      00816C 08 01            [ 1]  298 	sll	(1, sp)
      00816E 4A               [ 1]  299 	dec	a
      00816F 26 FB            [ 1]  300 	jrne	00105$
      008171                        301 00106$:
      008171 84               [ 1]  302 	pop	a
      008172 1A 01            [ 1]  303 	or	a, (0x01, sp)
      008174 AE 50 0A         [ 2]  304 	ldw	x, #0x500a
      008177 F7               [ 1]  305 	ld	(x), a
                                    306 ;	./buttest.c: 57: if_0();
      008178 CD 80 FD         [ 4]  307 	call	_if_0
      00817B 5B 02            [ 2]  308 	addw	sp, #2
      00817D 81               [ 4]  309 	ret
                                    310 ;	./buttest.c: 60: void RunningDn()    //функция направление бегущиго огня с п->л
                                    311 ;	-----------------------------------------
                                    312 ;	 function RunningDn
                                    313 ;	-----------------------------------------
      00817E                        314 _RunningDn:
      00817E 52 02            [ 2]  315 	sub	sp, #2
                                    316 ;	./buttest.c: 62: GPIOC->ODR ^= 0x80 >> n;
      008180 AE 50 0A         [ 2]  317 	ldw	x, #0x500a
      008183 F6               [ 1]  318 	ld	a, (x)
      008184 6B 02            [ 1]  319 	ld	(0x02, sp), a
      008186 A6 80            [ 1]  320 	ld	a, #0x80
      008188 88               [ 1]  321 	push	a
      008189 C6 00 03         [ 1]  322 	ld	a, _n+0
      00818C 27 05            [ 1]  323 	jreq	00104$
      00818E                        324 00103$:
      00818E 04 01            [ 1]  325 	srl	(1, sp)
      008190 4A               [ 1]  326 	dec	a
      008191 26 FB            [ 1]  327 	jrne	00103$
      008193                        328 00104$:
      008193 84               [ 1]  329 	pop	a
      008194 18 02            [ 1]  330 	xor	a, (0x02, sp)
      008196 AE 50 0A         [ 2]  331 	ldw	x, #0x500a
      008199 F7               [ 1]  332 	ld	(x), a
                                    333 ;	./buttest.c: 63: delay_ms(s);
      00819A CE 00 06         [ 2]  334 	ldw	x, _s+2
      00819D 89               [ 2]  335 	pushw	x
      00819E CD 80 C5         [ 4]  336 	call	_delay_ms
      0081A1 5B 02            [ 2]  337 	addw	sp, #2
                                    338 ;	./buttest.c: 64: GPIOC->ODR |= 0x80 >> n;
      0081A3 AE 50 0A         [ 2]  339 	ldw	x, #0x500a
      0081A6 F6               [ 1]  340 	ld	a, (x)
      0081A7 6B 01            [ 1]  341 	ld	(0x01, sp), a
      0081A9 A6 80            [ 1]  342 	ld	a, #0x80
      0081AB 88               [ 1]  343 	push	a
      0081AC C6 00 03         [ 1]  344 	ld	a, _n+0
      0081AF 27 05            [ 1]  345 	jreq	00106$
      0081B1                        346 00105$:
      0081B1 04 01            [ 1]  347 	srl	(1, sp)
      0081B3 4A               [ 1]  348 	dec	a
      0081B4 26 FB            [ 1]  349 	jrne	00105$
      0081B6                        350 00106$:
      0081B6 84               [ 1]  351 	pop	a
      0081B7 1A 01            [ 1]  352 	or	a, (0x01, sp)
      0081B9 AE 50 0A         [ 2]  353 	ldw	x, #0x500a
      0081BC F7               [ 1]  354 	ld	(x), a
                                    355 ;	./buttest.c: 65: if_0();
      0081BD CD 80 FD         [ 4]  356 	call	_if_0
      0081C0 5B 02            [ 2]  357 	addw	sp, #2
      0081C2 81               [ 4]  358 	ret
                                    359 ;	./buttest.c: 68: void runLdUp()    //функция переполняющийся бегущий огонь п->л
                                    360 ;	-----------------------------------------
                                    361 ;	 function runLdUp
                                    362 ;	-----------------------------------------
      0081C3                        363 _runLdUp:
      0081C3 88               [ 1]  364 	push	a
                                    365 ;	./buttest.c: 70: GPIOC->ODR ^= 0x08 << n;;
      0081C4 AE 50 0A         [ 2]  366 	ldw	x, #0x500a
      0081C7 F6               [ 1]  367 	ld	a, (x)
      0081C8 6B 01            [ 1]  368 	ld	(0x01, sp), a
      0081CA A6 08            [ 1]  369 	ld	a, #0x08
      0081CC 88               [ 1]  370 	push	a
      0081CD C6 00 03         [ 1]  371 	ld	a, _n+0
      0081D0 27 05            [ 1]  372 	jreq	00104$
      0081D2                        373 00103$:
      0081D2 08 01            [ 1]  374 	sll	(1, sp)
      0081D4 4A               [ 1]  375 	dec	a
      0081D5 26 FB            [ 1]  376 	jrne	00103$
      0081D7                        377 00104$:
      0081D7 84               [ 1]  378 	pop	a
      0081D8 18 01            [ 1]  379 	xor	a, (0x01, sp)
      0081DA AE 50 0A         [ 2]  380 	ldw	x, #0x500a
      0081DD F7               [ 1]  381 	ld	(x), a
                                    382 ;	./buttest.c: 71: delay_ms(s);
      0081DE CE 00 06         [ 2]  383 	ldw	x, _s+2
      0081E1 89               [ 2]  384 	pushw	x
      0081E2 CD 80 C5         [ 4]  385 	call	_delay_ms
      0081E5 5B 02            [ 2]  386 	addw	sp, #2
                                    387 ;	./buttest.c: 72: if_0();
      0081E7 CD 80 FD         [ 4]  388 	call	_if_0
      0081EA 84               [ 1]  389 	pop	a
      0081EB 81               [ 4]  390 	ret
                                    391 ;	./buttest.c: 75: void runLdDn()    //функция переполняющийся бегущий огонь п->л
                                    392 ;	-----------------------------------------
                                    393 ;	 function runLdDn
                                    394 ;	-----------------------------------------
      0081EC                        395 _runLdDn:
      0081EC 88               [ 1]  396 	push	a
                                    397 ;	./buttest.c: 77: GPIOC->ODR ^= 0x80 >> n;;
      0081ED AE 50 0A         [ 2]  398 	ldw	x, #0x500a
      0081F0 F6               [ 1]  399 	ld	a, (x)
      0081F1 6B 01            [ 1]  400 	ld	(0x01, sp), a
      0081F3 A6 80            [ 1]  401 	ld	a, #0x80
      0081F5 88               [ 1]  402 	push	a
      0081F6 C6 00 03         [ 1]  403 	ld	a, _n+0
      0081F9 27 05            [ 1]  404 	jreq	00104$
      0081FB                        405 00103$:
      0081FB 04 01            [ 1]  406 	srl	(1, sp)
      0081FD 4A               [ 1]  407 	dec	a
      0081FE 26 FB            [ 1]  408 	jrne	00103$
      008200                        409 00104$:
      008200 84               [ 1]  410 	pop	a
      008201 18 01            [ 1]  411 	xor	a, (0x01, sp)
      008203 AE 50 0A         [ 2]  412 	ldw	x, #0x500a
      008206 F7               [ 1]  413 	ld	(x), a
                                    414 ;	./buttest.c: 78: delay_ms(s);
      008207 CE 00 06         [ 2]  415 	ldw	x, _s+2
      00820A 89               [ 2]  416 	pushw	x
      00820B CD 80 C5         [ 4]  417 	call	_delay_ms
      00820E 5B 02            [ 2]  418 	addw	sp, #2
                                    419 ;	./buttest.c: 79: if_0();
      008210 CD 80 FD         [ 4]  420 	call	_if_0
      008213 84               [ 1]  421 	pop	a
      008214 81               [ 4]  422 	ret
                                    423 ;	./buttest.c: 82: int main( void )    //основная программа
                                    424 ;	-----------------------------------------
                                    425 ;	 function main
                                    426 ;	-----------------------------------------
      008215                        427 _main:
                                    428 ;	./buttest.c: 84: Pin();
      008215 CD 81 0D         [ 4]  429 	call	_Pin
                                    430 ;	./buttest.c: 86: rim();
      008218 9A               [ 1]  431 	rim 
      008219                        432 00108$:
                                    433 ;	./buttest.c: 90: switch(b)
      008219 C6 00 08         [ 1]  434 	ld	a, _b+0
      00821C A1 00            [ 1]  435 	cp	a, #0x00
      00821E 27 17            [ 1]  436 	jreq	00101$
      008220 C6 00 08         [ 1]  437 	ld	a, _b+0
      008223 A1 01            [ 1]  438 	cp	a, #0x01
      008225 27 15            [ 1]  439 	jreq	00102$
      008227 C6 00 08         [ 1]  440 	ld	a, _b+0
      00822A A1 02            [ 1]  441 	cp	a, #0x02
      00822C 27 13            [ 1]  442 	jreq	00103$
      00822E C6 00 08         [ 1]  443 	ld	a, _b+0
      008231 A1 03            [ 1]  444 	cp	a, #0x03
      008233 27 11            [ 1]  445 	jreq	00104$
      008235 20 14            [ 2]  446 	jra	00105$
                                    447 ;	./buttest.c: 92: case 0:
      008237                        448 00101$:
                                    449 ;	./buttest.c: 93: RunningUp();
      008237 CD 81 39         [ 4]  450 	call	_RunningUp
                                    451 ;	./buttest.c: 94: break;
      00823A 20 DD            [ 2]  452 	jra	00108$
                                    453 ;	./buttest.c: 95: case 1:
      00823C                        454 00102$:
                                    455 ;	./buttest.c: 96: RunningDn();
      00823C CD 81 7E         [ 4]  456 	call	_RunningDn
                                    457 ;	./buttest.c: 97: break;
      00823F 20 D8            [ 2]  458 	jra	00108$
                                    459 ;	./buttest.c: 98: case 2:
      008241                        460 00103$:
                                    461 ;	./buttest.c: 99: runLdUp();
      008241 CD 81 C3         [ 4]  462 	call	_runLdUp
                                    463 ;	./buttest.c: 100: break;
      008244 20 D3            [ 2]  464 	jra	00108$
                                    465 ;	./buttest.c: 101: case 3:
      008246                        466 00104$:
                                    467 ;	./buttest.c: 102: runLdDn();
      008246 CD 81 EC         [ 4]  468 	call	_runLdDn
                                    469 ;	./buttest.c: 103: break;
      008249 20 CE            [ 2]  470 	jra	00108$
                                    471 ;	./buttest.c: 104: default:
      00824B                        472 00105$:
                                    473 ;	./buttest.c: 105: GPIOC->ODR |= 0xf8;
      00824B AE 50 0A         [ 2]  474 	ldw	x, #0x500a
      00824E F6               [ 1]  475 	ld	a, (x)
      00824F AA F8            [ 1]  476 	or	a, #0xf8
      008251 F7               [ 1]  477 	ld	(x), a
                                    478 ;	./buttest.c: 107: }
      008252 20 C5            [ 2]  479 	jra	00108$
      008254 81               [ 4]  480 	ret
                                    481 	.area CODE
                                    482 	.area INITIALIZER
      008255                        483 __xinit__s:
      008255 00 00 07 D0            484 	.byte #0x00,#0x00,#0x07,#0xD0	; 2000
      008259                        485 __xinit__b:
      008259 04                     486 	.db #0x04	; 4
                                    487 	.area CABS (ABS)
