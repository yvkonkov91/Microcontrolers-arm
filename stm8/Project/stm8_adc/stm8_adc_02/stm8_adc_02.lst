                                      1 ;--------------------------------------------------------
                                      2 ; File Created by SDCC : free open source ANSI-C Compiler
                                      3 ; Version 3.5.0 #9253 (Mar 24 2016) (Linux)
                                      4 ; This file was generated Fri May  4 21:51:49 2018
                                      5 ;--------------------------------------------------------
                                      6 	.module stm8_adc_02
                                      7 	.optsdcc -mstm8
                                      8 	
                                      9 ;--------------------------------------------------------
                                     10 ; Public variables in this module
                                     11 ;--------------------------------------------------------
                                     12 	.globl _main
                                     13 	.globl _adc1_r_cfg
                                     14 	.globl _mode
                                     15 	.globl _pin_cfg
                                     16 	.globl _uart_rx_byte
                                     17 	.globl _uart_tx_int
                                     18 	.globl _uart_tx_data
                                     19 	.globl _uart_tx_byte
                                     20 	.globl _clearStr
                                     21 	.globl _uart1_cfg
                                     22 	.globl _clk_cfg
                                     23 	.globl _delay_ms
                                     24 	.globl _tim4_cfg
                                     25 	.globl _delay_interrupt
                                     26 	.globl _adc
                                     27 	.globl _IT
                                     28 	.globl _count
                                     29 ;--------------------------------------------------------
                                     30 ; ram data
                                     31 ;--------------------------------------------------------
                                     32 	.area DATA
      000000                         33 _count::
      000000                         34 	.ds 2
      000002                         35 _IT::
      000002                         36 	.ds 1
      000003                         37 _adc::
      000003                         38 	.ds 2
                                     39 ;--------------------------------------------------------
                                     40 ; ram data
                                     41 ;--------------------------------------------------------
                                     42 	.area INITIALIZED
                                     43 ;--------------------------------------------------------
                                     44 ; Stack segment in internal ram 
                                     45 ;--------------------------------------------------------
                                     46 	.area	SSEG
      000000                         47 __start__stack:
      000000                         48 	.ds	1
                                     49 
                                     50 ;--------------------------------------------------------
                                     51 ; absolute external ram data
                                     52 ;--------------------------------------------------------
                                     53 	.area DABS (ABS)
                                     54 ;--------------------------------------------------------
                                     55 ; interrupt vector 
                                     56 ;--------------------------------------------------------
                                     57 	.area HOME
      000000                         58 __interrupt_vect:
      000000 82v00u00u00             59 	int s_GSINIT ;reset
      000004 82 00 00 00             60 	int 0x0000 ;trap
      000008 82 00 00 00             61 	int 0x0000 ;int0
      00000C 82 00 00 00             62 	int 0x0000 ;int1
      000010 82 00 00 00             63 	int 0x0000 ;int2
      000014 82 00 00 00             64 	int 0x0000 ;int3
      000018 82 00 00 00             65 	int 0x0000 ;int4
      00001C 82 00 00 00             66 	int 0x0000 ;int5
      000020 82 00 00 00             67 	int 0x0000 ;int6
      000024 82 00 00 00             68 	int 0x0000 ;int7
      000028 82 00 00 00             69 	int 0x0000 ;int8
      00002C 82 00 00 00             70 	int 0x0000 ;int9
      000030 82 00 00 00             71 	int 0x0000 ;int10
      000034 82 00 00 00             72 	int 0x0000 ;int11
      000038 82 00 00 00             73 	int 0x0000 ;int12
      00003C 82 00 00 00             74 	int 0x0000 ;int13
      000040 82 00 00 00             75 	int 0x0000 ;int14
      000044 82 00 00 00             76 	int 0x0000 ;int15
      000048 82 00 00 00             77 	int 0x0000 ;int16
      00004C 82 00 00 00             78 	int 0x0000 ;int17
      000050 82 00 00 00             79 	int 0x0000 ;int18
      000054 82 00 00 00             80 	int 0x0000 ;int19
      000058 82 00 00 00             81 	int 0x0000 ;int20
      00005C 82 00 00 00             82 	int 0x0000 ;int21
      000060 82 00 00 00             83 	int 0x0000 ;int22
      000064 82v00u00u00             84 	int _delay_interrupt ;int23
      000068 82 00 00 00             85 	int 0x0000 ;int24
      00006C 82 00 00 00             86 	int 0x0000 ;int25
      000070 82 00 00 00             87 	int 0x0000 ;int26
      000074 82 00 00 00             88 	int 0x0000 ;int27
      000078 82 00 00 00             89 	int 0x0000 ;int28
      00007C 82 00 00 00             90 	int 0x0000 ;int29
                                     91 ;--------------------------------------------------------
                                     92 ; global & static initialisations
                                     93 ;--------------------------------------------------------
                                     94 	.area HOME
                                     95 	.area GSINIT
                                     96 	.area GSFINAL
                                     97 	.area GSINIT
      000000                         98 __sdcc_gs_init_startup:
      000000                         99 __sdcc_init_data:
                                    100 ; stm8_genXINIT() start
      000000 AEr00r00         [ 2]  101 	ldw x, #l_DATA
      000003 27 07            [ 1]  102 	jreq	00002$
      000005                        103 00001$:
      000005 72 4FuFFuFF      [ 1]  104 	clr (s_DATA - 1, x)
      000009 5A               [ 2]  105 	decw x
      00000A 26 F9            [ 1]  106 	jrne	00001$
      00000C                        107 00002$:
      00000C AEr00r00         [ 2]  108 	ldw	x, #l_INITIALIZER
      00000F 27 09            [ 1]  109 	jreq	00004$
      000011                        110 00003$:
      000011 D6uFFuFF         [ 1]  111 	ld	a, (s_INITIALIZER - 1, x)
      000014 D7uFFuFF         [ 1]  112 	ld	(s_INITIALIZED - 1, x), a
      000017 5A               [ 2]  113 	decw	x
      000018 26 F7            [ 1]  114 	jrne	00003$
      00001A                        115 00004$:
                                    116 ; stm8_genXINIT() end
                                    117 	.area GSFINAL
      000000 CCr00r80         [ 2]  118 	jp	__sdcc_program_startup
                                    119 ;--------------------------------------------------------
                                    120 ; Home
                                    121 ;--------------------------------------------------------
                                    122 	.area HOME
                                    123 	.area HOME
      000080                        124 __sdcc_program_startup:
      000080 CCr01rEC         [ 2]  125 	jp	_main
                                    126 ;	return from main will return to caller
                                    127 ;--------------------------------------------------------
                                    128 ; code
                                    129 ;--------------------------------------------------------
                                    130 	.area CODE
                                    131 ;	../lib/lib1/inc/stm8s_delay.h: 3: extern void delay_interrupt(void) __interrupt(23) //обработчик прерывания функции delay_ms таймера TIM4
                                    132 ;	-----------------------------------------
                                    133 ;	 function delay_interrupt
                                    134 ;	-----------------------------------------
      000000                        135 _delay_interrupt:
                                    136 ;	../lib/lib1/inc/stm8s_delay.h: 5: if(count)
      000000 CEu00u00         [ 2]  137 	ldw	x, _count+0
      000003 27 07            [ 1]  138 	jreq	00102$
                                    139 ;	../lib/lib1/inc/stm8s_delay.h: 6: count--;    //дикримент переменной count
      000005 CEu00u00         [ 2]  140 	ldw	x, _count+0
      000008 5A               [ 2]  141 	decw	x
      000009 CFu00u00         [ 2]  142 	ldw	_count+0, x
      00000C                        143 00102$:
                                    144 ;	../lib/lib1/inc/stm8s_delay.h: 7: TIM4->SR1   = 0x00; ////событие обновления не происходило
      00000C 35 00 53 44      [ 1]  145 	mov	0x5344+0, #0x00
      000010 80               [11]  146 	iret
                                    147 ;	../lib/lib1/inc/stm8s_delay.h: 9: void tim4_cfg() //настройка таймера
                                    148 ;	-----------------------------------------
                                    149 ;	 function tim4_cfg
                                    150 ;	-----------------------------------------
      000011                        151 _tim4_cfg:
                                    152 ;	../lib/lib1/inc/stm8s_delay.h: 11: TIM4->SR1   = 0x1;   //событие обновления не происходило
      000011 35 01 53 44      [ 1]  153 	mov	0x5344+0, #0x01
                                    154 ;	../lib/lib1/inc/stm8s_delay.h: 12: TIM4->IER  |= 1;    // прерывания по обновлению включены
      000015 72 10 53 43      [ 1]  155 	bset	0x5343, #0
                                    156 ;	../lib/lib1/inc/stm8s_delay.h: 13: TIM4->PSCR |= 128; // установка предделителя 128
      000019 72 1E 53 47      [ 1]  157 	bset	0x5347, #7
                                    158 ;	../lib/lib1/inc/stm8s_delay.h: 14: TIM4->ARR  |= 124;    // значение автоперезагрузки
      00001D AE 53 48         [ 2]  159 	ldw	x, #0x5348
      000020 F6               [ 1]  160 	ld	a, (x)
      000021 AA 7C            [ 1]  161 	or	a, #0x7c
      000023 F7               [ 1]  162 	ld	(x), a
      000024 81               [ 4]  163 	ret
                                    164 ;	../lib/lib1/inc/stm8s_delay.h: 16: void delay_ms(uint16_t ms) //функция выдержки времени
                                    165 ;	-----------------------------------------
                                    166 ;	 function delay_ms
                                    167 ;	-----------------------------------------
      000025                        168 _delay_ms:
                                    169 ;	../lib/lib1/inc/stm8s_delay.h: 18: TIM4->CR1  = 0x0;
      000025 35 00 53 40      [ 1]  170 	mov	0x5340+0, #0x00
                                    171 ;	../lib/lib1/inc/stm8s_delay.h: 20: count = ms;
      000029 7B 04            [ 1]  172 	ld	a, (0x04, sp)
      00002B C7u00u01         [ 1]  173 	ld	_count+1, a
      00002E 7B 03            [ 1]  174 	ld	a, (0x03, sp)
      000030 C7u00u00         [ 1]  175 	ld	_count+0, a
                                    176 ;	../lib/lib1/inc/stm8s_delay.h: 21: TIM4->CR1  = 0x1;
      000033 35 01 53 40      [ 1]  177 	mov	0x5340+0, #0x01
                                    178 ;	../lib/lib1/inc/stm8s_delay.h: 22: while(count);
      000037                        179 00101$:
      000037 CEu00u00         [ 2]  180 	ldw	x, _count+0
      00003A 26 FB            [ 1]  181 	jrne	00101$
      00003C 81               [ 4]  182 	ret
                                    183 ;	../lib/lib1/inc/stm8s_uart.h: 5: void clk_cfg()
                                    184 ;	-----------------------------------------
                                    185 ;	 function clk_cfg
                                    186 ;	-----------------------------------------
      00003D                        187 _clk_cfg:
                                    188 ;	../lib/lib1/inc/stm8s_uart.h: 7: CLK->SWR     |= 0xE1;    //выбран основной источник тактиования HSI
      00003D AE 50 C4         [ 2]  189 	ldw	x, #0x50c4
      000040 F6               [ 1]  190 	ld	a, (x)
      000041 AA E1            [ 1]  191 	or	a, #0xe1
      000043 F7               [ 1]  192 	ld	(x), a
                                    193 ;	../lib/lib1/inc/stm8s_uart.h: 8: CLK->CKDIVR  |= 0x0; // коэффициент деления частоты HSI-генератора (2MHz)
      000044 AE 50 C6         [ 2]  194 	ldw	x, #0x50c6
      000047 F6               [ 1]  195 	ld	a, (x)
      000048 AE 50 C6         [ 2]  196 	ldw	x, #0x50c6
      00004B F7               [ 1]  197 	ld	(x), a
                                    198 ;	../lib/lib1/inc/stm8s_uart.h: 9: CLK->PCKENR1 |= 0b00010100; //включение модуля тактиования UART1 & TIM4
      00004C AE 50 C7         [ 2]  199 	ldw	x, #0x50c7
      00004F F6               [ 1]  200 	ld	a, (x)
      000050 AA 14            [ 1]  201 	or	a, #0x14
      000052 F7               [ 1]  202 	ld	(x), a
      000053 81               [ 4]  203 	ret
                                    204 ;	../lib/lib1/inc/stm8s_uart.h: 12: void uart1_cfg()
                                    205 ;	-----------------------------------------
                                    206 ;	 function uart1_cfg
                                    207 ;	-----------------------------------------
      000054                        208 _uart1_cfg:
                                    209 ;	../lib/lib1/inc/stm8s_uart.h: 14: UART1->CR1  |= 0b00000000;   //установка колличества бит передачи 8/9
      000054 AE 52 34         [ 2]  210 	ldw	x, #0x5234
      000057 F6               [ 1]  211 	ld	a, (x)
      000058 AE 52 34         [ 2]  212 	ldw	x, #0x5234
      00005B F7               [ 1]  213 	ld	(x), a
                                    214 ;	../lib/lib1/inc/stm8s_uart.h: 15: UART1->CR2  |= 0b00001100;   //разрешение работы RX & TX
      00005C AE 52 35         [ 2]  215 	ldw	x, #0x5235
      00005F F6               [ 1]  216 	ld	a, (x)
      000060 AA 0C            [ 1]  217 	or	a, #0x0c
      000062 F7               [ 1]  218 	ld	(x), a
                                    219 ;	../lib/lib1/inc/stm8s_uart.h: 16: UART1->CR3  |= 0b00000000;   //STOP bits 00 - 1 stop bit
      000063 AE 52 36         [ 2]  220 	ldw	x, #0x5236
      000066 F6               [ 1]  221 	ld	a, (x)
      000067 AE 52 36         [ 2]  222 	ldw	x, #0x5236
      00006A F7               [ 1]  223 	ld	(x), a
                                    224 ;	../lib/lib1/inc/stm8s_uart.h: 18: UART1->BRR2 |= 0x0;  //сначало записываем скорость передачи в BRR2! / 
      00006B AE 52 33         [ 2]  225 	ldw	x, #0x5233
      00006E F6               [ 1]  226 	ld	a, (x)
      00006F AE 52 33         [ 2]  227 	ldw	x, #0x5233
      000072 F7               [ 1]  228 	ld	(x), a
                                    229 ;	../lib/lib1/inc/stm8s_uart.h: 19: UART1->BRR1 |= 0x0d;  //записываеться значение только после записи значения в BRR2! /9600
      000073 AE 52 32         [ 2]  230 	ldw	x, #0x5232
      000076 F6               [ 1]  231 	ld	a, (x)
      000077 AA 0D            [ 1]  232 	or	a, #0x0d
      000079 F7               [ 1]  233 	ld	(x), a
      00007A 81               [ 4]  234 	ret
                                    235 ;	../lib/lib1/inc/stm8s_uart.h: 23: void clearStr(unsigned char* s)
                                    236 ;	-----------------------------------------
                                    237 ;	 function clearStr
                                    238 ;	-----------------------------------------
      00007B                        239 _clearStr:
                                    240 ;	../lib/lib1/inc/stm8s_uart.h: 25: for(IT=0;IT<32;IT++)
      00007B 72 5Fu00u02      [ 1]  241 	clr	_IT+0
      00007F                        242 00103$:
      00007F C6u00u02         [ 1]  243 	ld	a, _IT+0
      000082 A1 20            [ 1]  244 	cp	a, #0x20
      000084 24 0F            [ 1]  245 	jrnc	00105$
                                    246 ;	../lib/lib1/inc/stm8s_uart.h: 27: s[IT]=0;
      000086 5F               [ 1]  247 	clrw	x
      000087 C6u00u02         [ 1]  248 	ld	a, _IT+0
      00008A 97               [ 1]  249 	ld	xl, a
      00008B 72 FB 03         [ 2]  250 	addw	x, (0x03, sp)
      00008E 7F               [ 1]  251 	clr	(x)
                                    252 ;	../lib/lib1/inc/stm8s_uart.h: 25: for(IT=0;IT<32;IT++)
      00008F 72 5Cu00u02      [ 1]  253 	inc	_IT+0
      000093 20 EA            [ 2]  254 	jra	00103$
      000095                        255 00105$:
      000095 81               [ 4]  256 	ret
                                    257 ;	../lib/lib1/inc/stm8s_uart.h: 43: void uart_tx_byte(unsigned char c)
                                    258 ;	-----------------------------------------
                                    259 ;	 function uart_tx_byte
                                    260 ;	-----------------------------------------
      000096                        261 _uart_tx_byte:
                                    262 ;	../lib/lib1/inc/stm8s_uart.h: 45: while(UART1->SR ==(0<<7));
      000096                        263 00101$:
      000096 AE 52 30         [ 2]  264 	ldw	x, #0x5230
      000099 F6               [ 1]  265 	ld	a, (x)
      00009A 4D               [ 1]  266 	tnz	a
      00009B 27 F9            [ 1]  267 	jreq	00101$
                                    268 ;	../lib/lib1/inc/stm8s_uart.h: 46: UART1->DR = c;
      00009D AE 52 31         [ 2]  269 	ldw	x, #0x5231
      0000A0 7B 03            [ 1]  270 	ld	a, (0x03, sp)
      0000A2 F7               [ 1]  271 	ld	(x), a
      0000A3 81               [ 4]  272 	ret
                                    273 ;	../lib/lib1/inc/stm8s_uart.h: 50: void uart_tx_data(unsigned char *s)
                                    274 ;	-----------------------------------------
                                    275 ;	 function uart_tx_data
                                    276 ;	-----------------------------------------
      0000A4                        277 _uart_tx_data:
                                    278 ;	../lib/lib1/inc/stm8s_uart.h: 52: while(*s != 0) uart_tx_byte(*s++);
      0000A4 1E 03            [ 2]  279 	ldw	x, (0x03, sp)
      0000A6                        280 00101$:
      0000A6 F6               [ 1]  281 	ld	a, (x)
      0000A7 4D               [ 1]  282 	tnz	a
      0000A8 27 0A            [ 1]  283 	jreq	00104$
      0000AA 5C               [ 2]  284 	incw	x
      0000AB 89               [ 2]  285 	pushw	x
      0000AC 88               [ 1]  286 	push	a
      0000AD CDr00r96         [ 4]  287 	call	_uart_tx_byte
      0000B0 84               [ 1]  288 	pop	a
      0000B1 85               [ 2]  289 	popw	x
      0000B2 20 F2            [ 2]  290 	jra	00101$
      0000B4                        291 00104$:
      0000B4 81               [ 4]  292 	ret
                                    293 ;	../lib/lib1/inc/stm8s_uart.h: 55: void uart_tx_int(uint16_t c)//    Отправка числа от 0000 до 9999
                                    294 ;	-----------------------------------------
                                    295 ;	 function uart_tx_int
                                    296 ;	-----------------------------------------
      0000B5                        297 _uart_tx_int:
      0000B5 52 02            [ 2]  298 	sub	sp, #2
                                    299 ;	../lib/lib1/inc/stm8s_uart.h: 58: c=c%100000000;
      0000B7 16 05            [ 2]  300 	ldw	y, (0x05, sp)
      0000B9 5F               [ 1]  301 	clrw	x
      0000BA 4B 00            [ 1]  302 	push	#0x00
      0000BC 4B E1            [ 1]  303 	push	#0xe1
      0000BE 4B F5            [ 1]  304 	push	#0xf5
      0000C0 4B 05            [ 1]  305 	push	#0x05
      0000C2 90 89            [ 2]  306 	pushw	y
      0000C4 89               [ 2]  307 	pushw	x
      0000C5 CDr00r00         [ 4]  308 	call	__modslong
      0000C8 5B 08            [ 2]  309 	addw	sp, #8
      0000CA 1F 05            [ 2]  310 	ldw	(0x05, sp), x
                                    311 ;	../lib/lib1/inc/stm8s_uart.h: 59: temp=c/100;
      0000CC 1E 05            [ 2]  312 	ldw	x, (0x05, sp)
      0000CE 90 AE 00 64      [ 2]  313 	ldw	y, #0x0064
      0000D2 65               [ 2]  314 	divw	x, y
                                    315 ;	../lib/lib1/inc/stm8s_uart.h: 60: uart_tx_byte(temp/10+'0');
      0000D3 89               [ 2]  316 	pushw	x
      0000D4 90 AE 00 0A      [ 2]  317 	ldw	y, #0x000a
      0000D8 65               [ 2]  318 	divw	x, y
      0000D9 90 93            [ 1]  319 	ldw	y, x
      0000DB 9F               [ 1]  320 	ld	a, xl
      0000DC 85               [ 2]  321 	popw	x
      0000DD AB 30            [ 1]  322 	add	a, #0x30
      0000DF 89               [ 2]  323 	pushw	x
      0000E0 88               [ 1]  324 	push	a
      0000E1 CDr00r96         [ 4]  325 	call	_uart_tx_byte
      0000E4 84               [ 1]  326 	pop	a
      0000E5 85               [ 2]  327 	popw	x
                                    328 ;	../lib/lib1/inc/stm8s_uart.h: 61: uart_tx_byte(temp%10+'0');
      0000E6 90 AE 00 0A      [ 2]  329 	ldw	y, #0x000a
      0000EA 65               [ 2]  330 	divw	x, y
      0000EB 90 9F            [ 1]  331 	ld	a, yl
      0000ED AB 30            [ 1]  332 	add	a, #0x30
      0000EF 88               [ 1]  333 	push	a
      0000F0 CDr00r96         [ 4]  334 	call	_uart_tx_byte
      0000F3 84               [ 1]  335 	pop	a
                                    336 ;	../lib/lib1/inc/stm8s_uart.h: 62: temp=c%100;
      0000F4 1E 05            [ 2]  337 	ldw	x, (0x05, sp)
      0000F6 90 AE 00 64      [ 2]  338 	ldw	y, #0x0064
      0000FA 65               [ 2]  339 	divw	x, y
      0000FB 17 01            [ 2]  340 	ldw	(0x01, sp), y
                                    341 ;	../lib/lib1/inc/stm8s_uart.h: 63: uart_tx_byte(temp/10+'0');
      0000FD 1E 01            [ 2]  342 	ldw	x, (0x01, sp)
      0000FF 90 AE 00 0A      [ 2]  343 	ldw	y, #0x000a
      000103 65               [ 2]  344 	divw	x, y
      000104 9F               [ 1]  345 	ld	a, xl
      000105 AB 30            [ 1]  346 	add	a, #0x30
      000107 88               [ 1]  347 	push	a
      000108 CDr00r96         [ 4]  348 	call	_uart_tx_byte
      00010B 84               [ 1]  349 	pop	a
                                    350 ;	../lib/lib1/inc/stm8s_uart.h: 64: uart_tx_byte(temp%10+'0');
      00010C 1E 01            [ 2]  351 	ldw	x, (0x01, sp)
      00010E 90 AE 00 0A      [ 2]  352 	ldw	y, #0x000a
      000112 65               [ 2]  353 	divw	x, y
      000113 90 9F            [ 1]  354 	ld	a, yl
      000115 AB 30            [ 1]  355 	add	a, #0x30
      000117 88               [ 1]  356 	push	a
      000118 CDr00r96         [ 4]  357 	call	_uart_tx_byte
      00011B 5B 03            [ 2]  358 	addw	sp, #3
      00011D 81               [ 4]  359 	ret
                                    360 ;	../lib/lib1/inc/stm8s_uart.h: 68: unsigned char uart_rx_byte()
                                    361 ;	-----------------------------------------
                                    362 ;	 function uart_rx_byte
                                    363 ;	-----------------------------------------
      00011E                        364 _uart_rx_byte:
                                    365 ;	../lib/lib1/inc/stm8s_uart.h: 70: while(UART1->SR ==(0<<7));
      00011E                        366 00101$:
      00011E AE 52 30         [ 2]  367 	ldw	x, #0x5230
      000121 F6               [ 1]  368 	ld	a, (x)
      000122 4D               [ 1]  369 	tnz	a
      000123 27 F9            [ 1]  370 	jreq	00101$
                                    371 ;	../lib/lib1/inc/stm8s_uart.h: 71: return UART1->DR;
      000125 AE 52 31         [ 2]  372 	ldw	x, #0x5231
      000128 F6               [ 1]  373 	ld	a, (x)
      000129 81               [ 4]  374 	ret
                                    375 ;	./stm8_adc_02.c: 27: void pin_cfg()  //функция настройки GPIO
                                    376 ;	-----------------------------------------
                                    377 ;	 function pin_cfg
                                    378 ;	-----------------------------------------
      00012A                        379 _pin_cfg:
                                    380 ;	./stm8_adc_02.c: 29: GPIOB->DDR |= (1<<5);   //устанавливаем на выход пин 5 порта B
      00012A AE 50 07         [ 2]  381 	ldw	x, #0x5007
      00012D F6               [ 1]  382 	ld	a, (x)
      00012E AA 20            [ 1]  383 	or	a, #0x20
      000130 F7               [ 1]  384 	ld	(x), a
                                    385 ;	./stm8_adc_02.c: 30: GPIOB->CR1 |= (1<<5);   //устанавливаем подтяжку пин 5 порта B
      000131 AE 50 08         [ 2]  386 	ldw	x, #0x5008
      000134 F6               [ 1]  387 	ld	a, (x)
      000135 AA 20            [ 1]  388 	or	a, #0x20
      000137 F7               [ 1]  389 	ld	(x), a
                                    390 ;	./stm8_adc_02.c: 31: GPIOB->CR2 |= (0<<5);   //минимальная скорость на выход / без прерывания на вход
      000138 AE 50 09         [ 2]  391 	ldw	x, #0x5009
      00013B F6               [ 1]  392 	ld	a, (x)
      00013C AE 50 09         [ 2]  393 	ldw	x, #0x5009
      00013F F7               [ 1]  394 	ld	(x), a
                                    395 ;	./stm8_adc_02.c: 32: GPIOB->ODR |= (1<<5);
      000140 AE 50 05         [ 2]  396 	ldw	x, #0x5005
      000143 F6               [ 1]  397 	ld	a, (x)
      000144 AA 20            [ 1]  398 	or	a, #0x20
      000146 F7               [ 1]  399 	ld	(x), a
                                    400 ;	./stm8_adc_02.c: 34: GPIOD->DDR |= (1<<5);   //устанавливаем на выход пин 5 порта D TX
      000147 AE 50 11         [ 2]  401 	ldw	x, #0x5011
      00014A F6               [ 1]  402 	ld	a, (x)
      00014B AA 20            [ 1]  403 	or	a, #0x20
      00014D F7               [ 1]  404 	ld	(x), a
                                    405 ;	./stm8_adc_02.c: 35: GPIOD->CR1 |= (0<<5);   //
      00014E AE 50 12         [ 2]  406 	ldw	x, #0x5012
      000151 F6               [ 1]  407 	ld	a, (x)
      000152 AE 50 12         [ 2]  408 	ldw	x, #0x5012
      000155 F7               [ 1]  409 	ld	(x), a
                                    410 ;	./stm8_adc_02.c: 36: GPIOD->CR2 |= (0<<5);   //без прерывания на вход / минимальная скорость на выход
      000156 AE 50 13         [ 2]  411 	ldw	x, #0x5013
      000159 F6               [ 1]  412 	ld	a, (x)
      00015A AE 50 13         [ 2]  413 	ldw	x, #0x5013
      00015D F7               [ 1]  414 	ld	(x), a
                                    415 ;	./stm8_adc_02.c: 37: GPIOD->ODR |= (1<<5);
      00015E AE 50 0F         [ 2]  416 	ldw	x, #0x500f
      000161 F6               [ 1]  417 	ld	a, (x)
      000162 AA 20            [ 1]  418 	or	a, #0x20
      000164 F7               [ 1]  419 	ld	(x), a
                                    420 ;	./stm8_adc_02.c: 39: GPIOC->DDR |= (0<<4);   //устанавливаем на выход пин 5 порта C
      000165 AE 50 0C         [ 2]  421 	ldw	x, #0x500c
      000168 F6               [ 1]  422 	ld	a, (x)
      000169 AE 50 0C         [ 2]  423 	ldw	x, #0x500c
      00016C F7               [ 1]  424 	ld	(x), a
                                    425 ;	./stm8_adc_02.c: 40: GPIOC->CR1 |= (0<<4);   //устанавливаем подтяжку пин 5 порта C
      00016D AE 50 0D         [ 2]  426 	ldw	x, #0x500d
      000170 F6               [ 1]  427 	ld	a, (x)
      000171 AE 50 0D         [ 2]  428 	ldw	x, #0x500d
      000174 F7               [ 1]  429 	ld	(x), a
                                    430 ;	./stm8_adc_02.c: 41: GPIOC->CR2 |= (0<<4);   //минимальная скорость на выход / без прерывания на вход
      000175 AE 50 0E         [ 2]  431 	ldw	x, #0x500e
      000178 F6               [ 1]  432 	ld	a, (x)
      000179 AE 50 0E         [ 2]  433 	ldw	x, #0x500e
      00017C F7               [ 1]  434 	ld	(x), a
                                    435 ;	./stm8_adc_02.c: 42: GPIOC->ODR |= (1<<4);
      00017D AE 50 0A         [ 2]  436 	ldw	x, #0x500a
      000180 F6               [ 1]  437 	ld	a, (x)
      000181 AA 10            [ 1]  438 	or	a, #0x10
      000183 F7               [ 1]  439 	ld	(x), a
      000184 81               [ 4]  440 	ret
                                    441 ;	./stm8_adc_02.c: 46: void mode()
                                    442 ;	-----------------------------------------
                                    443 ;	 function mode
                                    444 ;	-----------------------------------------
      000185                        445 _mode:
                                    446 ;	./stm8_adc_02.c: 48: pin_cfg();
      000185 CDr01r2A         [ 4]  447 	call	_pin_cfg
                                    448 ;	./stm8_adc_02.c: 50: uart1_cfg();
      000188 CDr00r54         [ 4]  449 	call	_uart1_cfg
                                    450 ;	./stm8_adc_02.c: 52: clk_cfg();
      00018B CDr00r3D         [ 4]  451 	call	_clk_cfg
                                    452 ;	./stm8_adc_02.c: 54: tim4_cfg();
      00018E CDr00r11         [ 4]  453 	call	_tim4_cfg
                                    454 ;	./stm8_adc_02.c: 56: rim();
      000191 9A               [ 1]  455 	rim 
      000192 81               [ 4]  456 	ret
                                    457 ;	./stm8_adc_02.c: 59: uint16_t adc1_r_cfg(uint8_t channel) 
                                    458 ;	-----------------------------------------
                                    459 ;	 function adc1_r_cfg
                                    460 ;	-----------------------------------------
      000193                        461 _adc1_r_cfg:
      000193 52 03            [ 2]  462 	sub	sp, #3
                                    463 ;	./stm8_adc_02.c: 63: CLK->PCKENR2 |= 0b00001000; //тактирование модуля ADC1
      000195 AE 50 CA         [ 2]  464 	ldw	x, #0x50ca
      000198 F6               [ 1]  465 	ld	a, (x)
      000199 AA 08            [ 1]  466 	or	a, #0x08
      00019B F7               [ 1]  467 	ld	(x), a
                                    468 ;	./stm8_adc_02.c: 64: ADC1->CSR |= ((0x0F)&channel); //выбор канала
      00019C AE 54 00         [ 2]  469 	ldw	x, #0x5400
      00019F F6               [ 1]  470 	ld	a, (x)
      0001A0 6B 03            [ 1]  471 	ld	(0x03, sp), a
      0001A2 7B 06            [ 1]  472 	ld	a, (0x06, sp)
      0001A4 A4 0F            [ 1]  473 	and	a, #0x0f
      0001A6 1A 03            [ 1]  474 	or	a, (0x03, sp)
      0001A8 AE 54 00         [ 2]  475 	ldw	x, #0x5400
      0001AB F7               [ 1]  476 	ld	(x), a
                                    477 ;	./stm8_adc_02.c: 65: ADC1->CR2 |= (1<<3);   // номер канала преобразования АЦП
      0001AC AE 54 02         [ 2]  478 	ldw	x, #0x5402
      0001AF F6               [ 1]  479 	ld	a, (x)
      0001B0 AA 08            [ 1]  480 	or	a, #0x08
      0001B2 F7               [ 1]  481 	ld	(x), a
                                    482 ;	./stm8_adc_02.c: 66: ADC1->CR1 |= (1<<0);   //включение АЦП 
      0001B3 72 10 54 01      [ 1]  483 	bset	0x5401, #0
                                    484 ;	./stm8_adc_02.c: 67: ADC1->CR1 |= (0<<1);   // одиночное преобразование
      0001B7 AE 54 01         [ 2]  485 	ldw	x, #0x5401
      0001BA F6               [ 1]  486 	ld	a, (x)
      0001BB AE 54 01         [ 2]  487 	ldw	x, #0x5401
      0001BE F7               [ 1]  488 	ld	(x), a
                                    489 ;	./stm8_adc_02.c: 68: while(((ADC1->CSR)&(1<<7))== 0);   // пока не завершено преобразование
      0001BF                        490 00101$:
      0001BF AE 54 00         [ 2]  491 	ldw	x, #0x5400
      0001C2 F6               [ 1]  492 	ld	a, (x)
      0001C3 4D               [ 1]  493 	tnz	a
      0001C4 2A F9            [ 1]  494 	jrpl	00101$
                                    495 ;	./stm8_adc_02.c: 69: val |= (uint8_t)ADC1->DRL;    //запись результата в переменную val из нижнего регистра
      0001C6 AE 54 05         [ 2]  496 	ldw	x, #0x5405
      0001C9 F6               [ 1]  497 	ld	a, (x)
      0001CA 5F               [ 1]  498 	clrw	x
      0001CB 97               [ 1]  499 	ld	xl, a
      0001CC 1F 01            [ 2]  500 	ldw	(0x01, sp), x
                                    501 ;	./stm8_adc_02.c: 70: val |= (uint8_t)ADC1->DRH<<8;    //запись результата в переменную val из верхнего регистра
      0001CE AE 54 04         [ 2]  502 	ldw	x, #0x5404
      0001D1 F6               [ 1]  503 	ld	a, (x)
      0001D2 95               [ 1]  504 	ld	xh, a
      0001D3 4F               [ 1]  505 	clr	a
      0001D4 4F               [ 1]  506 	clr	a
      0001D5 1A 02            [ 1]  507 	or	a, (0x02, sp)
      0001D7 02               [ 1]  508 	rlwa	x
      0001D8 1A 01            [ 1]  509 	or	a, (0x01, sp)
      0001DA 95               [ 1]  510 	ld	xh, a
                                    511 ;	./stm8_adc_02.c: 71: ADC1->CR1 &= ~(1<<0); // ADC Stop Conversion
      0001DB 90 AE 54 01      [ 2]  512 	ldw	y, #0x5401
      0001DF 90 F6            [ 1]  513 	ld	a, (y)
      0001E1 A4 FE            [ 1]  514 	and	a, #0xfe
      0001E3 90 F7            [ 1]  515 	ld	(y), a
                                    516 ;	./stm8_adc_02.c: 72: val &= 0x03ff;
      0001E5 9E               [ 1]  517 	ld	a, xh
      0001E6 A4 03            [ 1]  518 	and	a, #0x03
      0001E8 95               [ 1]  519 	ld	xh, a
                                    520 ;	./stm8_adc_02.c: 73: return val;
      0001E9 5B 03            [ 2]  521 	addw	sp, #3
      0001EB 81               [ 4]  522 	ret
                                    523 ;	./stm8_adc_02.c: 76: int main(void)
                                    524 ;	-----------------------------------------
                                    525 ;	 function main
                                    526 ;	-----------------------------------------
      0001EC                        527 _main:
      0001EC 52 02            [ 2]  528 	sub	sp, #2
                                    529 ;	./stm8_adc_02.c: 78: mode();
      0001EE CDr01r85         [ 4]  530 	call	_mode
                                    531 ;	./stm8_adc_02.c: 79: uart_tx_data("\n\r");
      0001F1 AEr02r59         [ 2]  532 	ldw	x, #___str_0+0
      0001F4 1F 01            [ 2]  533 	ldw	(0x01, sp), x
      0001F6 1E 01            [ 2]  534 	ldw	x, (0x01, sp)
      0001F8 89               [ 2]  535 	pushw	x
      0001F9 CDr00rA4         [ 4]  536 	call	_uart_tx_data
      0001FC 5B 02            [ 2]  537 	addw	sp, #2
                                    538 ;	./stm8_adc_02.c: 80: uart_tx_data("stm8s -> ok!\n\r");
      0001FE AEr02r5C         [ 2]  539 	ldw	x, #___str_1+0
      000201 89               [ 2]  540 	pushw	x
      000202 CDr00rA4         [ 4]  541 	call	_uart_tx_data
      000205 5B 02            [ 2]  542 	addw	sp, #2
      000207                        543 00102$:
                                    544 ;	./stm8_adc_02.c: 91: adc=adc1_r_cfg(2);
      000207 4B 02            [ 1]  545 	push	#0x02
      000209 CDr01r93         [ 4]  546 	call	_adc1_r_cfg
      00020C 84               [ 1]  547 	pop	a
      00020D CFu00u03         [ 2]  548 	ldw	_adc+0, x
                                    549 ;	./stm8_adc_02.c: 92: uart_tx_data("Volum: ");
      000210 AEr02r6B         [ 2]  550 	ldw	x, #___str_2+0
      000213 89               [ 2]  551 	pushw	x
      000214 CDr00rA4         [ 4]  552 	call	_uart_tx_data
      000217 5B 02            [ 2]  553 	addw	sp, #2
                                    554 ;	./stm8_adc_02.c: 93: uart_tx_int(adc);
      000219 3Bu00u04         [ 1]  555 	push	_adc+1
      00021C 3Bu00u03         [ 1]  556 	push	_adc+0
      00021F CDr00rB5         [ 4]  557 	call	_uart_tx_int
      000222 5B 02            [ 2]  558 	addw	sp, #2
                                    559 ;	./stm8_adc_02.c: 94: uart_tx_data("\n\r");
      000224 1E 01            [ 2]  560 	ldw	x, (0x01, sp)
      000226 89               [ 2]  561 	pushw	x
      000227 CDr00rA4         [ 4]  562 	call	_uart_tx_data
      00022A 5B 02            [ 2]  563 	addw	sp, #2
                                    564 ;	./stm8_adc_02.c: 95: clearStr("");
      00022C AEr02r73         [ 2]  565 	ldw	x, #___str_3+0
      00022F 89               [ 2]  566 	pushw	x
      000230 CDr00r7B         [ 4]  567 	call	_clearStr
      000233 5B 02            [ 2]  568 	addw	sp, #2
                                    569 ;	./stm8_adc_02.c: 96: GPIOB->ODR ^= (1<<5);
      000235 AE 50 05         [ 2]  570 	ldw	x, #0x5005
      000238 F6               [ 1]  571 	ld	a, (x)
      000239 A8 20            [ 1]  572 	xor	a, #0x20
      00023B F7               [ 1]  573 	ld	(x), a
                                    574 ;	./stm8_adc_02.c: 97: delay_ms(adc*10+100);
      00023C 3Bu00u04         [ 1]  575 	push	_adc+1
      00023F 3Bu00u03         [ 1]  576 	push	_adc+0
      000242 4B 0A            [ 1]  577 	push	#0x0a
      000244 4B 00            [ 1]  578 	push	#0x00
      000246 CDr00r00         [ 4]  579 	call	__mulint
      000249 5B 04            [ 2]  580 	addw	sp, #4
      00024B 1C 00 64         [ 2]  581 	addw	x, #0x0064
      00024E 89               [ 2]  582 	pushw	x
      00024F CDr00r25         [ 4]  583 	call	_delay_ms
      000252 5B 02            [ 2]  584 	addw	sp, #2
      000254 20 B1            [ 2]  585 	jra	00102$
      000256 5B 02            [ 2]  586 	addw	sp, #2
      000258 81               [ 4]  587 	ret
                                    588 	.area CODE
      000259                        589 ___str_0:
      000259 0A                     590 	.db 0x0A
      00025A 0D                     591 	.db 0x0D
      00025B 00                     592 	.db 0x00
      00025C                        593 ___str_1:
      00025C 73 74 6D 38 73 20 2D   594 	.ascii "stm8s -> ok!"
             3E 20 6F 6B 21
      000268 0A                     595 	.db 0x0A
      000269 0D                     596 	.db 0x0D
      00026A 00                     597 	.db 0x00
      00026B                        598 ___str_2:
      00026B 56 6F 6C 75 6D 3A 20   599 	.ascii "Volum: "
      000272 00                     600 	.db 0x00
      000273                        601 ___str_3:
      000273 00                     602 	.db 0x00
                                    603 	.area INITIALIZER
                                    604 	.area CABS (ABS)
